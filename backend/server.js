const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;
const HOST = '0.0.0.0'; // –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const corsOptions = {
    origin: function (origin, callback) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, Postman –∏ —Ç.–¥.)
        if (!origin) return callback(null, true);
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ localhost –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ IP
        if (origin.includes('localhost') || 
            origin.includes('127.0.0.1') || 
            origin.includes('192.168.') || 
            origin.includes('10.0.') ||
            origin.includes('172.')) {
            return callback(null, true);
        }
        
        // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        callback(null, true);
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
};

// Middleware
app.use(cors(corsOptions));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (frontend)
const frontendPath = path.join(__dirname, '../frontend');
console.log('üìÅ –ü—É—Ç—å –∫ frontend:', frontendPath);

app.use(express.static(frontendPath, {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    setHeaders: (res, path) => {
        if (path.endsWith('.html')) {
            res.setHeader('Cache-Control', 'no-cache');
        }
        if (path.endsWith('.css')) {
            res.setHeader('Content-Type', 'text/css');
        }
        if (path.endsWith('.js')) {
            res.setHeader('Content-Type', 'application/javascript');
        }
    }
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - ${req.get('User-Agent')?.substring(0, 50) || 'Unknown'}`);
    next();
});

// API Routes
const booksRouter = require('./routes/books');
const usersRouter = require('./routes/users');

app.use('/api/books', booksRouter);
app.use('/api/users', usersRouter);

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º frontend
app.get('/', (req, res) => {
    try {
        const indexPath = path.join(__dirname, '../frontend/index.html');
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º index.html: ${indexPath}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if (!fs.existsSync(indexPath)) {
            console.error('‚ùå index.html –Ω–µ –Ω–∞–π–¥–µ–Ω:', indexPath);
            return res.status(404).send('index.html –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        res.sendFile(indexPath);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ index.html:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
app.get('/api', (req, res) => {
    res.json({
        message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ API –ß–∏—Ç–∞–ª–∫–∏!',
        version: '1.0.0',
        endpoints: {
            books: '/api/books',
            users: '/api/users'
        },
        author: '–†–æ—Å—Ç–∏—Å–ª–∞–≤ –õ—É–∫—å—è–Ω—á—É–∫',
        description: 'Backend –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥ –æ–Ω–ª–∞–π–Ω'
    });
});

// 404 –¥–ª—è API
app.use('/api/*', (req, res) => {
    res.status(404).json({
        error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.path,
        method: req.method
    });
});

// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –æ—Ç–¥–∞–µ–º frontend (–¥–ª—è SPA)
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../frontend/index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.stack);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: process.env.NODE_ENV === 'development' ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
function getLocalIP() {
    const { networkInterfaces } = require('os');
    const nets = networkInterfaces();
    const results = [];

    for (const name of Object.keys(nets)) {
        for (const net of nets[name]) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ (localhost) –∏ –Ω–µ IPv4 –∞–¥—Ä–µ—Å–∞
            if (net.family === 'IPv4' && !net.internal) {
                results.push({
                    interface: name,
                    address: net.address
                });
            }
        }
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–±—ã—á–Ω–∞—è Wi-Fi —Å–µ—Ç—å (192.168.x.x)
    const wifiIP = results.find(ip => ip.address.startsWith('192.168.'));
    if (wifiIP) return wifiIP.address;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç Wi-Fi, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    return results[0]?.address || 'localhost';
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, HOST, () => {
    const localIP = getLocalIP();
    
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä –ß–∏—Ç–∞–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω!');
    console.log('üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:');
    console.log(`   –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}`);
    console.log(`   –í —Å–µ—Ç–∏:   http://${localIP}:${PORT}`);
    console.log('üîß API endpoints:');
    console.log(`   –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}/api`);
    console.log(`   –í —Å–µ—Ç–∏:   http://${localIP}:${PORT}/api`);
    console.log(`üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –†–æ—Å—Ç–∏—Å–ª–∞–≤ –õ—É–∫—å—è–Ω—á—É–∫`);
    console.log('---');
    console.log('üí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å');
    console.log('üîí –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç', PORT);
});

module.exports = app;